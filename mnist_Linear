import torch
import torch.nn as nn
import torch.nn.functional as F
import numpy as np
from torch.autograd import Variable
from statistics import *
from torch.nn import Sequential
from torch.nn.parameter import Parameter
from torch.nn.modules.activation import Sigmoid
from torch.nn import Module
from torch.utils.data import DataLoader
import torchvision
import torch.optim

batch_size=16
epochs=5
lr=1e-2
random_seed=1
torch.manual_seed(random_seed)

# Load data
train_loader=DataLoader(torchvision.datasets.
MNIST(root='./data/',train=True,download=True,
transform=torchvision.transforms.Compose([
    torchvision.transforms.ToTensor(),
    torchvision.transforms.Normalize
    ((0.1307,),(0.3081,))])),batch_size=batch_size,shuffle=True)

test_loader = DataLoader(torchvision.datasets.
MNIST(root='./data/', train=False, download=True,
                             transform=torchvision.transforms.Compose([
                               torchvision.transforms.ToTensor(),
                               torchvision.transforms.Normalize(
                                 (0.1307,), (0.3081,))
                             ])),batch_size=100, shuffle=True)
                             
# Creat Iterator
train = enumerate(train_loader)
batch_idx, (example_data, example_targets) = next(train)
test=enumerate(test_loader)
batch_idx,(data,target)=next(test)

# batch_idx is the number of batch fed in a epoch, which have 60000/16=3750.

class Multilayers(nn.Module):

    def __init__(self,in_features,out_features):
        super(Multilayers, self).__init__()
        self.in_features = in_features 
        self.out_features = out_features 
        self.block = nn.Sequential(
        torch.nn.Linear(self.in_features,64,False),
        nn.Sigmoid(),
        torch.nn.Linear(64,self.out_features,False),
    )
    def forward(self,x):  # Q:从Module继承下来的类，为什么一定要用于Module相同的方法名forward？
        output = self.block(x)
        return output
model=Multilayers(28*28,10)
cross_el = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=0.01) 

# Start training:
for epoch in range(epochs):
    model.train()
    for batch_idx,(example_data,example_targets) in enumerate(train_loader):
        optimizer.zero_grad()
        example_data=example_data.view(example_data.shape[0],-1)
        y_pred=model(example_data)
        loss = cross_el(y_pred, example_targets)
        loss.backward()
        optimizer.step()
        
# Test the model:
correct=0
total=0
with torch.no_grad():
    for batch_idx,(data,target) in enumerate(test_loader):
        output = model(data.view(-1, 784))
        for idx, i in enumerate(output):
            if torch.argmax(i) == target[idx]:
                correct +=1
            total +=1
print(f'accuracy: {100*round(correct/total, 3)}')
# The accuracy = 93.5%



